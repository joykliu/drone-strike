{"version":3,"sources":["main.js"],"names":["url","droneApp","mapboxgl","accessToken","getDrones","$","ajax","method","dataType","when","then","data","dataCleanUp","strike","map","result","m_names","Array","date","split","splice","year","dateObj","Date","month","getMonth","displayDate","displayStrikes","strikeData","markerData","forEach","singleStrike","lat","lon","town","summary","link","deaths","time","getPopupInfo","length","country","location","narrative","bij_summary_short","bij_link","number","join","deaths_min","console","log","featureObj","type","geometry","coordinates","properties","description","iconSize","push","geojson","features","on","addSource","addLayer","id","source","paint","circle-radius","circle-color","popup","Popup","closeButton","closeOnClick","e","queryRenderedFeatures","point","layers","getCanvas","style","cursor","remove","feature","setLngLat","setHTML","addTo","initMap","Map","container","center","zoom","maxZoom","init"],"mappings":"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","file":"main.min.js","sourcesContent":["// define callback url, app shell and mapbox key\nconst url = 'http://api.dronestre.am/data';\nconst droneApp = {};\nmapboxgl.accessToken = 'pk.eyJ1Ijoiam95OTAxN21hcGJveCIsImEiOiJjaW94M2RneXQwMDJ1d2ZtNXp4a29pbTV4In0.TebEkoRfRP8E0hw_Nd3PFA';\n\n// calling for drone results\n\ndroneApp.getDrones = $.ajax ({\n    url: url,\n    method: 'GET',\n    dataType: 'jsonp'\n});\n\n$.when(droneApp.getDrones).then(data => {\n    // show date as year form\n    droneApp.dataCleanUp = () => {\n        data.strike.map(result => {\n            const m_names = new Array(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\");\n            result.date = result.date.split('-').splice(0,2);\n            result.year = result.date[0];\n            let dateObj = new Date(result.date);\n            const month = m_names[dateObj.getMonth()];\n            result.displayDate = `${month}, ${result.year}`;\n        })\n    } // displayResults()\n\n    // display markers\n    droneApp.displayStrikes = (strikeData) => {\n        // create empty array to store markers\n        droneApp.markerData = [];\n\n        // display markers\n        strikeData.forEach((singleStrike) => {\n            // define marker latitute and longtitute\n            const lat = singleStrike.lat\n            ,     lon = singleStrike.lon;\n            // define information contained in popup\n            let town, summary, link, deaths, time;\n\n            //NOTEðŸ‘‡: DO NOT DO THIS FIND A WAY TO WRAP THIS BETTER. USE TENERAY\n            const getPopupInfo = () => {\n                if (singleStrike.town.length && singleStrike.country.length) {\n                    town = singleStrike.town + singleStrike.country;\n                } else if (singleStrike.location.length){\n                    town = singleStrike.location + singleStrike.country\n                } else {\n                    town = 'Unknown'\n                }\n\n                if (singleStrike.narrative.length) {\n                    summary = singleStrike.narrative\n                } else if (singleStrike.bij_summary_short.length){\n                    summary = singleStrike.bij_summary_short\n                } else {\n                    summary = 'Awaiting detailed information on this strike...'\n                }\n\n                if (singleStrike.bij_link.length) {\n                    link = singleStrike.bij_summary_short.length\n                }\n\n                if (singleStrike.displayDate) {\n                    time = singleStrike.displayDate\n                }\n\n                let number = singleStrike.deaths;\n                if(number.length > 2) {\n                    deaths = number.split('-').join(' to ')\n                } else {\n                    deaths = number;\n                }\n\n                if(singleStrike.deaths_min === '0' && singleStrike.deaths_min === ' ' && singleStrike.deaths_min === '?') {\n                    console.log(singleStrike.deaths_min)\n                }\n\n            }\n            getPopupInfo();\n\n            // create geojson objsct for markers\n            const featureObj =\n            {\n                \"type\": \"Feature\",\n                \"geometry\": {\n                    \"type\": \"Point\",\n                    \"coordinates\": [lon, lat]\n                },\n                \"properties\": {\n                    \"description\":\n                    `<div class=\"marker-content\">\n                    <p>${time}</p>\n                    <h3>${town}</h3>\n                    <h4>Deaths: ${deaths}</h4>\n                    <p>${summary}</p>\n                    <a href=\"${link}\">More Details...</a>\n                    </div>`,\n                    \"iconSize\": [40,40]\n                }\n            };\n            droneApp.markerData.push(featureObj);\n        })// forEach(singleStrike)\n\n        const geojson = {\n            \"type\": \"FeatureCollection\",\n            \"features\": droneApp.markerData\n        }\n\n        droneApp.map.on('load', () => {\n            droneApp.map.addSource(\"strikes\", {\n                \"type\": \"geojson\",\n                \"data\": geojson\n            });\n\n            droneApp.map.addLayer({\n                \"id\": \"strikes\",\n                \"type\": \"circle\",\n                \"source\": \"strikes\",\n                \"paint\": {\n                    \"circle-radius\": 10,\n                    \"circle-color\": \"#007cbf\"\n                }\n            });\n        })\n        //create popups, but not adding them to map yet\n\n        let popup = new mapboxgl.Popup({\n            closeButton: false,\n            closeOnClick: false\n        });\n\n        droneApp.map.on('mousemove', function(e) {\n            const features = droneApp.map.queryRenderedFeatures(e.point, { layers: ['strikes'] });\n\n            // Change the cursor style as a UI indicator.\n            droneApp.map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';\n\n            if (!features.length) {\n                popup.remove();\n                return;\n            }\n            const feature = features[0];\n\n            // Populate the popup and set its coordinates\n            // based on the feature found.\n            popup.setLngLat(feature.geometry.coordinates)\n            .setHTML(feature.properties.description)\n            .addTo(droneApp.map);\n        })\n\n        // fit map to marker bounds\n        // create geojson object to store marker coordinates sotred in markerArry\n        const fitMap = () => {\n            if(droneApp.markerArr.length > 1) {\n                const geojson = {\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [{\n                        \"type\": \"Feature\",\n                        \"geometry\": {\n                            \"type\": \"Markers\",\n                            \"properties\": {},\n                            \"coordinates\": droneApp.markerArr\n                        }\n                    }]\n                };\n                const coordinates = geojson.features[0].geometry.coordinates;\n\n                /* Pass the first coordinates in markerArry to `lngLatBounds` &\n                ** wrap each coordinate pair in `extend` to include them in the bounds\n                ** result. A variation of this technique could be applied to zooming\n                ** to the bounds of multiple Points or Polygon geomteries - it just\n                ** requires wrapping all the coordinates with the extend method. */\n                const bounds = coordinates.reduce(function(bounds, coord) {\n                    return bounds.extend(coord);\n                }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\n                droneApp.map.fitBounds(bounds, {padding:50});\n            } else if (droneApp.markerArr.length){\n                droneApp.map.flyTo({center:droneApp.markerArr[0]});\n            }// if(data.filteredStrikes)\n        } // fit map\n        // fitMap();\n    } // displayStrikes()\n\n    //display map\n    droneApp.initMap = () => {\n        droneApp.map = new mapboxgl.Map({\n            container: 'map',\n            style: 'mapbox://styles/mapbox/satellite-v9',\n            center: [54.281023, 10.913129],\n            zoom: 3,\n            maxZoom: 13\n        })\n    }\n\n    // initiate drone app\n    droneApp.init = () => {\n        droneApp.initMap();\n        droneApp.dataCleanUp();\n        droneApp.displayStrikes(data.strike);\n    }\n    droneApp.init();\n}) // promise\n"]}