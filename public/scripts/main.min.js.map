{"version":3,"sources":["main.js"],"names":["url","droneApp","mapboxgl","accessToken","getDrones","$","ajax","method","dataType","when","then","data","filterResults","strike","map","result","m_names","Array","date","split","splice","year","dateObj","Date","month","getMonth","displayDate","on","markers","console","log","getCheckedInputValue","param","input","value","val","toArray","checkedYears","checkedCountries","defaultCountries","defaultYears","filteringResult","checkedValues","defaultValues","category","baseData","length","filteredRaw","criteria","filter","singleStrike","country","filteredResult","n","filteredStrikes","displayStrikes","strikeData","markerArr","forEach","lat","lon","town","summary","link","deaths","time","getPopupInfo","location","narrative","bij_summary_short","bij_link","number","join","addSource","type","features","properties","description","geometry","coordinates","addLayer","id","source","layout","fitMap","geojson","bounds","reduce","coord","extend","LngLatBounds","fitBounds","padding","flyTo","center","initMap","Map","container","style","zoom","maxZoom","init"],"mappings":"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","file":"main.min.js","sourcesContent":["// define callback url, app shell and mapbox key\nconst url = 'http://api.dronestre.am/data';\nconst droneApp = {};\nmapboxgl.accessToken = 'pk.eyJ1Ijoiam95OTAxN21hcGJveCIsImEiOiJjaW94M2RneXQwMDJ1d2ZtNXp4a29pbTV4In0.TebEkoRfRP8E0hw_Nd3PFA';\n\n// calling for drone results\n\ndroneApp.getDrones = $.ajax ({\n    url: url,\n    method: 'GET',\n    dataType: 'jsonp'\n});\n\n$.when(droneApp.getDrones).then(data => {\n    // show date as year form\n    droneApp.filterResults = () => {\n\n        data.strike.map(result => {\n            const m_names = new Array(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\");\n            result.date = result.date.split('-').splice(0,2);\n            result.year = result.date[0];\n            let dateObj = new Date(result.date);\n            const month = m_names[dateObj.getMonth()];\n            result.displayDate = `${month}, ${result.year}`;\n        })\n        $(`input[type=checkbox]`).on('change', ()=> {\n            if (droneApp.markers) {\n                console.log(droneApp.markers);\n            }\n            // collect chekced values into an array\n            let getCheckedInputValue = (param) => {\n                return $(`input[name=${param}]:checked`).map((input, value) => {\n                    return $(value).val()\n                }).toArray();\n            }\n            // define checked and default values for filter use\n            const checkedYears = getCheckedInputValue('year');\n            const checkedCountries = getCheckedInputValue('country');;\n            const defaultCountries = ['Yemen', 'Somalia', 'Pakistan'];\n            const defaultYears = ['2002', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016'];\n\n            // filter resutls\n            const filteringResult = (checkedValues, defaultValues, category, baseData) => {\n                if(checkedValues.length !== 0) {\n                    // when the user makes a selection filter data against checked boxes\n                    var filteredRaw = checkedValues.map((criteria) => {\n                        return baseData.filter((singleStrike) => {\n                            if (category === 'year') {\n                                return singleStrike.year === criteria\n                            } else if (category === 'country') {\n                                return singleStrike.country === criteria\n                            }\n                        })\n                    })\n                } else {\n                    // when no selection is made, show all possible results\n                    var filteredRaw = defaultValues.map((criteria) => {\n                        return baseData.filter((singleStrike) => {\n                            if (category === 'year') {\n                                return singleStrike.year === criteria\n                            } else if (category === 'country') {\n                                return singleStrike.country === criteria;\n                            }\n                        })\n                    })\n                }\n                // turn filtered result, a multilevel array, into a flattened array\n                var filteredResult = $.map(filteredRaw, function(n) {\n                    return n\n                })\n                data.filteredStrikes = filteredResult;\n                // return data;\n            }\n            // first call for data to be filtered with an original dataset\n            filteringResult(checkedYears, defaultYears, 'year', data.strike);\n            // then call for data to be filtered wiht an filtered dataset\n            filteringResult(checkedCountries, defaultCountries, 'country',data.filteredStrikes);\n\n            // display strike markers on map\n            droneApp.displayStrikes(data.filteredStrikes);\n        }) // Checkbox on change\n    } // displayResults()\n\n    // display markers\n    droneApp.displayStrikes = (strikeData) => {\n        // create empty array to store markers\n        droneApp.markerArr = [];\n        // display markers\n        strikeData.forEach((singleStrike) => {\n            // define marker latitute and longtitute\n            const lat = singleStrike.lat\n            ,     lon = singleStrike.lon;\n            // define information contained in popup\n            let town, summary, link, deaths, time;\n            //NOTEðŸ‘‡: DO NOT DO THIS FIND A WAY TO WRAP THIS BETTER. USE TENERAY\n            const getPopupInfo = () => {\n                if (singleStrike.town.length && singleStrike.country.length) {\n                    town = singleStrike.town + singleStrike.country;\n                } else if (singleStrike.location.length){\n                    town = singleStrike.location + singleStrike.country\n                } else {\n                    town = 'Unknown'\n                }\n\n                if (singleStrike.narrative.length) {\n                    summary = singleStrike.narrative\n                } else if (singleStrike.bij_summary_short.length){\n                    summary = singleStrike.bij_summary_short\n                } else {\n                    summary = 'Awaiting detailed information on this strike...'\n                }\n\n                if (singleStrike.bij_link.length) {\n                    link = singleStrike.bij_summary_short.length\n                }\n\n                if (singleStrike.displayDate.length) {\n                    time = singleStrike.displayDate\n                }\n\n                let number = singleStrike.deaths;\n                if(number.length > 2) {\n                    deaths = number.split('-').join(' to ')\n                } else {\n                    deaths = number;\n                }\n            }\n            getPopupInfo();\n            // create geojson objsct for markers\n            droneApp.map.addSource('places', {\n                \"type\": \"geojson\",\n                \"data\": {\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [{\n                        \"type\": \"Feature\",\n                        \"properties\": {\n                            \"description\":\n                                `<div class=\"marker-content\">\n                                    <p>${time}</p>\n                                    <h3>${town}</h3>\n                                    <h4>Deaths: ${deaths}</h4>\n                                    <p>${summary}</p>\n                                    <a href=\"${link}\">More Details...</a>\n                                </div>`\n                        },\n                        \"geometry\": {\n                            \"type\": \"Point\",\n                            \"coordinates\": [lon, lat]\n                        }\n                    }]\n                }\n            });\n            droneApp.map.addLayer({\n                \"id\": \"places\",\n                \"type\": \"symbol\",\n                \"source\": \"places\",\n                \"layout\": {\n\n                }\n            })\n            // const popup = new mapboxgl.Popup({offset: [0,0]}).setHTML(`\n            //     <div class=\"marker-content\">\n            //         <p>${time}</p>\n            //         <h3>${town}</h3>\n            //         <h4>Deaths: ${deaths}</h4>\n            //         <p>${summary}</p>\n            //         <a href=\"${link}\">More Details...</a>\n            //     </div>\n            // `);\n            // if (lat && lon) {\n            //     const el = document.createElement('div');\n            //     el.className = 'marker';\n            //     // add markeres to map\n            //     droneApp.markers = new mapboxgl.Marker(el)\n            //     .setLngLat([lon, lat])\n            //     .setPopup(popup)\n            //     .addTo(droneApp.map);\n            //     // push markers to empty array\n            //     droneApp.markerArr.push([lon, lat])\n            //     // when location exists create dom element for Marker\n            // };\n        })// forEach(singleStrike)\n        // fit map to marker bounds\n        // NOTE: SOLUTION 1: CREATE FEATURE GROUP (GEOJSON) FOR MARKERS, GET FEATURE GROUP BOUNDS\n        // create geojson object to store marker coordinates sotred in markerArry\n        const fitMap = () => {\n            if(droneApp.markerArr.length > 1) {\n                const geojson = {\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [{\n                        \"type\": \"Feature\",\n                        \"geometry\": {\n                            \"type\": \"Markers\",\n                            \"properties\": {},\n                            \"coordinates\": droneApp.markerArr\n                        }\n                    }]\n                };\n                const coordinates = geojson.features[0].geometry.coordinates;\n\n                /* Pass the first coordinates in markerArry to `lngLatBounds` &\n                ** wrap each coordinate pair in `extend` to include them in the bounds\n                ** result. A variation of this technique could be applied to zooming\n                ** to the bounds of multiple Points or Polygon geomteries - it just\n                ** requires wrapping all the coordinates with the extend method. */\n                const bounds = coordinates.reduce(function(bounds, coord) {\n                    return bounds.extend(coord);\n                }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\n                droneApp.map.fitBounds(bounds, {padding:50});\n            } else if (droneApp.markerArr.length){\n                droneApp.map.flyTo({center:droneApp.markerArr[0]});\n            }// if(data.filteredStrikes)\n        } // fit map\n        fitMap();\n    } // displayStrikes()\n\n    //display map\n    droneApp.initMap = () => {\n        droneApp.map = new mapboxgl.Map({\n            container: 'map',\n            style: 'mapbox://styles/mapbox/satellite-v9',\n            center: [54.281023, 10.913129],\n            zoom: 3,\n            maxZoom: 13\n        })\n    }\n\n    // initiate drone app\n    droneApp.init = () => {\n        droneApp.initMap();\n        droneApp.filterResults();\n    }\n    droneApp.init();\n}) // promise\n"]}