{"version":3,"sources":["main.js"],"names":["url","droneApp","mapboxgl","accessToken","getDrones","$","ajax","method","dataType","when","then","data","filteringResult","strike","map","result","m_names","Array","date","split","splice","year","dateObj","Date","month","getMonth","displayDate","on","getCheckedInputValue","param","input","value","val","toArray","checkedYears","checkedCountries","defaultCountries","defaultYears","checkedValues","defaultValues","category","baseData","length","filteredRaw","criteria","filter","singleStrike","country","filteredResult","n","filteredStrikes","initMap","Map","container","style","displayStrikes","markerArr","displayMarkers","undefined","forEach","lat","lon","console","log","town","summary","link","deaths","time","getPopupInfo","location","narrative","bij_summary_short","bij_link","numberReconstruct","number","join","popup","Popup","offset","setHTML","el","document","createElement","className","markers","Marker","setLngLat","setPopup","addTo","push","fitMap","geojson","type","features","geometry","properties","coordinates","bounds","reduce","coord","extend","LngLatBounds","fitBounds","padding","init"],"mappings":"YACA,IAAMA,KAAM,+BACNC,WACNC,UAASC,YAAc,oGAIvBF,SAASG,UAAYC,EAAEC,MACnBN,IAAKA,IACLO,OAAQ,MACRC,SAAU,UAGdH,EAAEI,KAAKR,SAASG,WAAWM,KAAK,SAAAC,GAE5BV,SAASW,gBAAkB,WACvBD,EAAKE,OAAOC,IAAI,SAAAC,GACZ,GAAMC,GAAU,GAAIC,OAAM,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,WACxIF,GAAOG,KAAOH,EAAOG,KAAKC,MAAM,KAAKC,OAAO,EAAE,GAC9CL,EAAOM,KAAON,EAAOG,KAAK,EAC1B,IAAII,GAAU,GAAIC,MAAKR,EAAOG,MACxBM,EAAQR,EAAQM,EAAQG,WAC9BV,GAAOW,YAAiBF,EAAxB,KAAkCT,EAAOM,OAG7ChB,EAAAA,wBAA0BsB,GAAG,SAAU,WAEnC,GAAIC,GAAuB,SAACC,GACxB,MAAOxB,GAAAA,cAAgBwB,EAAhB,aAAkCf,IAAI,SAACgB,EAAOC,GACjD,MAAO1B,GAAE0B,GAAOC,QACjBC,WAGDC,EAAeN,EAAqB,QACpCO,EAAmBP,EAAqB,WACxCQ,GAAoB,QAAS,UAAW,YACxCC,GAAgB,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAGxHzB,EAAkB,SAAC0B,EAAeC,EAAeC,EAAUC,GAC7D,GAA4B,IAAzBH,EAAcI,OAEb,GAAIC,GAAcL,EAAcxB,IAAI,SAAC8B,GACjC,MAAOH,GAASI,OAAO,SAACC,GACpB,MAAiB,SAAbN,EACOM,EAAazB,OAASuB,EACT,YAAbJ,EACAM,EAAaC,UAAYH,EAD7B,eAOf,IAAID,GAAcJ,EAAczB,IAAI,SAAC8B,GACjC,MAAOH,GAASI,OAAO,SAACC,GACpB,MAAiB,SAAbN,EACOM,EAAazB,OAASuB,EACT,YAAbJ,EACAM,EAAaC,UAAYH,EAD7B,UAOnB,IAAII,GAAiB3C,EAAES,IAAI6B,EAAa,SAASM,GAC7C,MAAOA,IAEXtC,GAAKuC,gBAAkBF,EAI3BpC,GAAgBsB,EAAcG,EAAc,OAAQ1B,EAAKE,QAEzDD,EAAgBuB,EAAkBC,EAAkB,UAAUzB,EAAKuC,oBAI3EjD,SAASkD,QAAU,WACflD,SAASa,IAAM,GAAIZ,UAASkD,KACxBC,UAAW,MACXC,MAAO,uCAIfrD,SAASsD,eAAiB,WAEtBtD,SAASuD,YAGT,IAAMC,GAAiB,WACUC,SAAzB/C,EAAKuC,iBACLvC,EAAKuC,gBAAgBS,QAAQ,SAACb,GAE1B,GAAIc,GAAMd,EAAac,IACjBC,EAAMf,EAAae,GACzBC,SAAQC,IAAIjB,EAEZ,IAAIkB,GAAAA,OAAMC,EAAAA,OAASC,EAAAA,OAAMC,EAAAA,OAAQC,EAAAA,OAE3BC,EAAe,WAEbL,EADAlB,EAAakB,KAAKtB,OACXI,EAAakB,KACblB,EAAawB,SAAS5B,OACtBI,EAAawB,SAEb,UAIPL,EADAnB,EAAayB,UAAU7B,OACbI,EAAayB,UAChBzB,EAAa0B,kBAAkB9B,OAC5BI,EAAa0B,kBAEb,kDAGV1B,EAAa2B,SAAS/B,SACtBwB,EAAOpB,EAAa0B,kBAAkB9B,QAGtCI,EAAapB,YAAYgB,SACzB0B,EAAOtB,EAAapB,YAGxB,IAAMgD,GAAoB,WACtB,GAAIC,GAAS7B,EAAaqB,MAEtBA,GADDQ,EAAOjC,OAAS,EACNiC,EAAOxD,MAAM,KAAKyD,KAAK,QAEvBD,EAGjBD,KAEJL,IACA,IAAMQ,GAAQ,GAAI3E,UAAS4E,OAAOC,QAAS,EAAE,KAAKC,QAApC,0FAEDZ,EAFC,yCAGAJ,EAHA,kDAIQG,EAJR,yCAKDF,EALC,8CAMKC,EANL,kFASd,IAAIN,EAAIlB,QAAUmB,EAAInB,OAAQ,CAE1B,GAAMuC,GAAKC,SAASC,cAAc,MAClCF,GAAGG,UAAY,SAEfnF,SAASoF,QAAU,GAAInF,UAASoF,OAAOL,GACtCM,WAAW1B,EAAKD,IAChB4B,SAASX,GACTY,MAAMxF,SAASa,KAEhBb,SAASuD,UAAUkC,MAAM7B,EAAKD,QAQxC+B,EAAS,WACX,GAAMC,IACFC,KAAQ,oBACRC,WACID,KAAQ,UACRE,UACIF,KAAQ,UACRG,cACAC,YAAehG,SAASuD,cAI9ByC,EAAcL,EAAQE,SAAS,GAAGC,SAASE,YAO3CC,EAASD,EAAYE,OAAO,SAASD,EAAQE,GAC/C,MAAOF,GAAOG,OAAOD,IACtB,GAAIlG,UAASoG,aAAaL,EAAY,GAAIA,EAAY,IACzDhG,UAASa,IAAIyF,UAAUL,GAASM,QAAQ,KAG5C/C,KACAkC,KAGJ1F,SAASwG,KAAO,WACZxG,SAASW,kBACTX,SAASkD,UACTlD,SAASsD,kBAGbtD,SAASwG","file":"main.min.js","sourcesContent":["// define callback url, app shell and mapbox key\nconst url = 'http://api.dronestre.am/data';\nconst droneApp = {};\nmapboxgl.accessToken = 'pk.eyJ1Ijoiam95OTAxN21hcGJveCIsImEiOiJjaW94M2RneXQwMDJ1d2ZtNXp4a29pbTV4In0.TebEkoRfRP8E0hw_Nd3PFA';\n\n// calling for drone results\n\ndroneApp.getDrones = $.ajax ({\n    url: url,\n    method: 'GET',\n    dataType: 'jsonp'\n});\n\n$.when(droneApp.getDrones).then(data => {\n    // show date as year form\n    droneApp.filteringResult = () => {\n        data.strike.map(result => {\n            const m_names = new Array(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\");\n            result.date = result.date.split('-').splice(0,2);\n            result.year = result.date[0];\n            let dateObj = new Date(result.date);\n            const month = m_names[dateObj.getMonth()];\n            result.displayDate = `${month}, ${result.year}`;\n        })\n\n        $(`input[type=checkbox]`).on('change', ()=> {\n            // collect chekced values into an array\n            let getCheckedInputValue = (param) => {\n                return $(`input[name=${param}]:checked`).map((input, value) => {\n                    return $(value).val()\n                }).toArray();\n            }\n            // define checked and default values for filter use\n            const checkedYears = getCheckedInputValue('year');\n            const checkedCountries = getCheckedInputValue('country');;\n            const defaultCountries = ['Yemen', 'Somalia', 'Pakistan'];\n            const defaultYears = ['2002', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016'];\n\n            // filter resutls\n            const filteringResult = (checkedValues, defaultValues, category, baseData) => {\n                if(checkedValues.length !== 0) {\n                    // when the user makes a selection filter data against checked boxes\n                    var filteredRaw = checkedValues.map((criteria) => {\n                        return baseData.filter((singleStrike) => {\n                            if (category === 'year') {\n                                return singleStrike.year === criteria\n                            } else if (category === 'country') {\n                                return singleStrike.country === criteria\n                            }\n                        })\n                    })\n                } else {\n                    // when no selection is made, show all possible results\n                    var filteredRaw = defaultValues.map((criteria) => {\n                        return baseData.filter((singleStrike) => {\n                            if (category === 'year') {\n                                return singleStrike.year === criteria\n                            } else if (category === 'country') {\n                                return singleStrike.country === criteria;\n                            }\n                        })\n                    })\n                }\n                // turn filtered result, a multilevel array, into a flattened array\n                var filteredResult = $.map(filteredRaw, function(n) {\n                    return n\n                })\n                data.filteredStrikes = filteredResult;\n                // return data;\n            }\n            // first call for data to be filtered with an original dataset\n            filteringResult(checkedYears, defaultYears, 'year', data.strike);\n            // then call for data to be filtered wiht an filtered dataset\n            filteringResult(checkedCountries, defaultCountries, 'country',data.filteredStrikes);\n        })\n    }\n\n    droneApp.initMap = () => {\n        droneApp.map = new mapboxgl.Map({\n            container: 'map',\n            style: 'mapbox://styles/mapbox/streets-v9'\n        })\n    }\n\n    droneApp.displayStrikes = () => {\n        // display map\n        droneApp.markerArr = [];\n        // create empty array to store markers\n        // display markers\n        const displayMarkers = () => {\n            if (data.filteredStrikes !== undefined) {\n                data.filteredStrikes.forEach((singleStrike) => {\n                    // define marker latitute and longtitute\n                    let lat = singleStrike.lat\n                    ,     lon = singleStrike.lon;\n                    console.log(singleStrike);\n                    // define information contained in popup\n                    let town, summary, link, deaths, time;\n                    //NOTEğŸ‘‡: DO NOT DO THIS FIND A WAY TO WRAP THIS BETTER\n                    const getPopupInfo = () => {\n                        if (singleStrike.town.length) {\n                            town = singleStrike.town;\n                        } else if (singleStrike.location.length){\n                            town = singleStrike.location\n                        } else {\n                            town = 'Unknown'\n                        }\n\n                        if (singleStrike.narrative.length) {\n                            summary = singleStrike.narrative\n                        } else if (singleStrike.bij_summary_short.length){\n                            summary = singleStrike.bij_summary_short\n                        } else {\n                            summary = 'Awaiting detailed information on this strike...'\n                        }\n\n                        if (singleStrike.bij_link.length) {\n                            link = singleStrike.bij_summary_short.length\n                        }\n\n                        if (singleStrike.displayDate.length) {\n                            time = singleStrike.displayDate\n                        }\n\n                        const numberReconstruct = () => {\n                            let number = singleStrike.deaths;\n                            if(number.length > 2) {\n                                deaths = number.split('-').join(' to ')\n                            } else {\n                                deaths = number;\n                            }\n                        }\n                        numberReconstruct();\n                    }\n                    getPopupInfo();\n                    const popup = new mapboxgl.Popup({offset: [0,0]}).setHTML(`\n                        <div class=\"marker-content\">\n                            <p>${time}</p>\n                            <h3>${town}</h3>\n                            <h4>Deaths: ${deaths}</h4>\n                            <p>${summary}</p>\n                            <a href=\"${link}\">More Details...</a>\n                        </div>\n                        `);\n                    if (lat.length && lon.length) {\n                        // when location exists create dom element for Marker\n                        const el = document.createElement('div');\n                        el.className = 'marker';\n                        // add markeres to map\n                        droneApp.markers = new mapboxgl.Marker(el)\n                        .setLngLat([lon, lat])\n                        .setPopup(popup)\n                        .addTo(droneApp.map);\n                        // push markers to empty array\n                        droneApp.markerArr.push([lon, lat])\n                    };\n                })\n            }\n        }\n        // fit map to marker bounds\n        // NOTE: SOLUTION 1: CREATE FEATURE GROUP (GEOJSON) FOR MARKERS, GET FEATURE GROUP BOUNDS\n        // create geojson object to store marker coordinates sotred in markerArry\n        const fitMap = () => {\n            const geojson = {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Markers\",\n                        \"properties\": {},\n                        \"coordinates\": droneApp.markerArr\n                    }\n                }]\n            };\n            const coordinates = geojson.features[0].geometry.coordinates;\n\n            /* Pass the first coordinates in markerArry to `lngLatBounds` &\n            ** wrap each coordinate pair in `extend` to include them in the bounds\n            ** result. A variation of this technique could be applied to zooming\n            ** to the bounds of multiple Points or Polygon geomteries - it just\n            ** requires wrapping all the coordinates with the extend method. */\n            const bounds = coordinates.reduce(function(bounds, coord) {\n                return bounds.extend(coord);\n            }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\n            droneApp.map.fitBounds(bounds, {padding:50});\n        }\n\n        displayMarkers();\n        fitMap();\n    }\n\n    droneApp.init = () => {\n        droneApp.filteringResult();\n        droneApp.initMap();\n        droneApp.displayStrikes();\n    }\n\n    droneApp.init();\n})\n"]}